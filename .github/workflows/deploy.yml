name: Deploy Frontend on ubuntu server

on:
    push:
        branches: deploy

jobs:
    job-1-deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code into runner machine
              uses: actions/checkout@v3

            - name: Set up SSH in local runner machine
              uses: webfactory/ssh-agent@v0.5.3
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: ssh into virtual machine & CLONE GITHUB REPO
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ vars.SERVER_USERNAME }}@${{ vars.SERVER_IP }} << 'EOF'

                  cd ${{ vars.DEPLOYMENT_DIR }}

                  # Delete file if previously exists 
                  # extract repository name  form github.repository = username/repository_name
                  REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
                  sudo rm -rf $REPO_NAME

                  # Clone the repository with minimal depth
                  sudo git clone --depth 1 https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

                  # Build the frontend docker container
                  echo "Building frontend Docker container"

                  # Generate a sanitized container name
                  CONTAINER_NAME=$(echo "$REPO_NAME" | \
                  tr '[:upper:]' '[:lower:]' | \
                  sed 's/[^a-z0-9]/-/g' | \
                  sed 's/^-\+/-/g' | \
                  sed 's/-\+$//g')

                  # Change to repo dir
                  cd $REPO_NAME
                  sudo rm .env
                  printf "%s" "${{ vars.ENV_FILE }}" > .env

                  # Build the Docker container
                  docker build --no-cache -t $CONTAINER_NAME .

                  # Stop any previously running container
                  docker stop $CONTAINER_NAME || true
                  docker rm $CONTAINER_NAME || true

                  # Run the container with the appropriate environment variables

                  docker run --env-file /.env --restart unless-stopped --detach --name $CONTAINER_NAME --publish ${{ vars.PORT }}:80 $CONTAINER_NAME:latest

                  EOF
